// koffee 1.3.0
var $, childp, clamp, done, drag, electron, elem, getApps, initWin, karg, keyinfo, klog, kpos, onKeyDown, onMouseDown, onMouseMove, pngPath, post, prefs, ref, slash, start, wc,
    indexOf = [].indexOf;

ref = require('kxk'), childp = ref.childp, post = ref.post, karg = ref.karg, slash = ref.slash, drag = ref.drag, elem = ref.elem, prefs = ref.prefs, clamp = ref.clamp, kpos = ref.kpos, klog = ref.klog, keyinfo = ref.keyinfo, $ = ref.$;

wc = require('./wc');

electron = require('electron');

getApps = function() {
    var apps, i, info, infos, len, ref1;
    infos = wc('info');
    apps = [];
    for (i = 0, len = infos.length; i < len; i++) {
        info = infos[i];
        klog(info);
        if (info.title !== 'wxw-switch') {
            if (ref1 = info.path, indexOf.call(apps, ref1) < 0) {
                apps.push(info.path);
            }
        }
    }
    return apps;
};

pngPath = function(appPath) {
    return slash.resolve(slash.join(slash.userData(), 'icons', slash.base(appPath) + ".png"));
};

start = function(opt) {
    var app, apps, as, border, data, height, html, i, len, png, ss, width, win;
    if (opt == null) {
        opt = {};
    }
    ss = electron.screen.getPrimaryDisplay().workAreaSize;
    as = 128;
    border = 20;
    apps = getApps();
    for (i = 0, len = apps.length; i < len; i++) {
        app = apps[i];
        png = pngPath(slash.base(app));
        if (!slash.fileExists(png)) {
            klog('icon', app, png);
            wc('icon', app, png);
        }
    }
    width = (as + border) * apps.length + border;
    height = as + border * 2;
    win = new electron.BrowserWindow({
        backgroundColor: '#00000000',
        transparent: true,
        preloadWindow: true,
        x: parseInt((ss.width - width) / 2),
        y: parseInt((ss.height - height) / 2),
        width: width,
        height: height,
        hasShadow: false,
        resizable: false,
        frame: false,
        thickFrame: false,
        fullscreen: false,
        show: true,
        webPreferences: {
            nodeIntegration: true,
            webSecurity: false
        }
    });
    html = "<head>\n<title>wxw-switch</title>\n<style type=\"text/css\">\n    * {\n        outline-width:  0;\n    }\n    \n    body {\n        overflow:       hidden;\n        margin:         0;\n    }\n    .apps {\n        opacity:        1;\n        white-space:    nowrap;\n        position:       absolute;\n        left:           0px;\n        top:            0px;\n        bottom:         0px;\n        right:          0px;\n        overflow:       hidden;\n        background:     rgb(16,16,16);\n        border-radius:  6px;\n        padding:        10px;\n    }\n    .app {\n        display:        inline-block;\n        width:          128px;\n        height:         128px;\n        padding:        10px;\n    }\n    .app:hover {\n        background:     rgb(24,24,24);\n    }\n</style>\n</head>\n<body>\n<div class=\"apps\" tabindex=0></div>\n<script>\n    var pth = process.resourcesPath + \"/app/js/switch.js\";\n    if (process.resourcesPath.indexOf(\"node_modules\\\\electron\\\\dist\\\\resources\")>=0) { pth = process.cwd() + \"/js/switch.js\"; }\n    console.log(pth, process.resourcesPath);\n    require(pth).initWin();\n</script>\n</body>";
    data = "data:text/html;charset=utf-8," + encodeURI(html);
    win.loadURL(data, {
        baseURLForDataURL: slash.fileUrl(__dirname + '/index.html')
    });
    win.debug = opt.debug;
    if (opt.debug) {
        win.webContents.openDevTools();
    }
    return win;
};

done = function() {
    return electron.remote.getCurrentWindow().close();
};

onMouseMove = function(event) {
    return klog(event.target.id);
};

onMouseDown = function(event) {
    done();
    if (event.target.id) {
        return wc('focus', event.target.id);
    }
};

onKeyDown = function(event) {
    var char, combo, key, mod, ref1;
    ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, char = ref1.char, combo = ref1.combo;
    switch (key) {
        case 'esc':
            return done();
        default:
            return klog('onKeyDown', combo);
    }
};

initWin = function() {
    var a, apps, i, len, p, win;
    win = electron.remote.getCurrentWindow();
    a = $('.apps');
    a.onmousemove = onMouseMove;
    a.onmousedown = onMouseDown;
    a.onkeydown = onKeyDown;
    apps = getApps();
    for (i = 0, len = apps.length; i < len; i++) {
        p = apps[i];
        a.appendChild(elem('img', {
            id: p,
            "class": 'app',
            src: slash.fileUrl(pngPath(p))
        }));
    }
    return a.focus();
};

module.exports = {
    start: start,
    initWin: initWin
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/switch.coffee