// koffee 1.3.0
var $, borderScroll, borderTimer, childp, clamp, createWindow, doScroll, done, drag, electron, init, karg, klog, kpos, mapRange, offset, onDblClick, onDragMove, onDragStart, onDragStop, onMouseMove, onWheel, post, prefs, ref, scale, screenshotFile, screenshotPath, scrollSpeed, slash, start, taskbar, transform, wc;

ref = require('kxk'), childp = ref.childp, post = ref.post, karg = ref.karg, slash = ref.slash, drag = ref.drag, prefs = ref.prefs, clamp = ref.clamp, kpos = ref.kpos, klog = ref.klog, $ = ref.$;

wc = require('./wc');

electron = require('electron');

taskbar = false;

screenshotPath = function() {
    return slash.resolve(slash.join(prefs.get('screenhotFolder', slash.resolve("~/Desktop")), 'screenshot.png'));
};

screenshotFile = function() {
    return slash.unslash(screenshotPath());
};

start = function(opt) {
    if (opt == null) {
        opt = {};
    }
    wc('screenshot', screenshotFile());
    return createWindow(opt);
};

createWindow = function(opt) {
    var data, html, info, pngFile, ss, win;
    info = wc('info', 'taskbar')[0];
    if (info.status !== 'hidden') {
        wc('taskbar', 'hide');
        taskbar = true;
    } else {
        taskbar = false;
    }
    ss = electron.screen.getPrimaryDisplay().workAreaSize;
    win = new electron.BrowserWindow({
        backgroundColor: '#00000000',
        transparent: true,
        preloadWindow: true,
        x: 0,
        y: 0,
        width: ss.width,
        height: ss.height,
        hasShadow: false,
        resizable: false,
        frame: false,
        thickFrame: false,
        show: true,
        fullscreen: !opt.debug,
        webPreferences: {
            nodeIntegration: true,
            webSecurity: false
        }
    });
    pngFile = slash.fileUrl(screenshotPath());
    html = "<head>\n<style type=\"text/css\">\n    body {\n        overflow:       hidden;\n        margin:         1px;\n        border:         none;\n    }\n    img {\n        position:       absolute;\n        left:           0;\n        top:            0;\n        width:          " + ss.width + "px;\n        height:         " + ss.height + "px;\n    }\n</style>\n</head>\n<body>\n<img class=\"screenshot\" tabindex=0 src=\"" + pngFile + "\"/>\n<script>\n    var pth = process.resourcesPath + \"/app/js/zoom.js\";\n    if (process.resourcesPath.indexOf(\"node_modules\\\\electron\\\\dist\\\\resources\")>=0) { pth = process.cwd() + \"/js/zoom.js\"; }\n    console.log(pth, process.resourcesPath);\n    require(pth).init();\n</script>\n</body>";
    data = "data:text/html;charset=utf-8," + encodeURI(html);
    win.loadURL(data, {
        baseURLForDataURL: slash.fileUrl(__dirname + '/index.html')
    });
    win.debug = opt.debug;
    win.on('ready-to-show', function() {});
    if (opt.debug) {
        win.webContents.openDevTools();
    } else {
        win.maximize();
    }
    return win;
};

done = function() {
    var win;
    win = electron.remote.getCurrentWindow();
    win.close();
    if (taskbar) {
        wc('taskbar', 'show');
    }
    if (win.debug) {
        return electron.remote.app.exit(0);
    }
};

init = function() {
    var a, win;
    win = electron.remote.getCurrentWindow();
    a = $('.screenshot');
    a.ondblclick = onDblClick;
    a.onmousemove = onMouseMove;
    a.onmousewheel = onWheel;
    a.onkeydown = done;
    if (!win.debug) {
        a.onblur = done;
    }
    new drag({
        target: a,
        onStart: onDragStart,
        onMove: onDragMove,
        onStop: onDragStop
    });
    return a.focus();
};

scale = 1.0;

offset = kpos(0, 0);

transform = function() {
    var a, ox, oy, vh, vw;
    vw = electron.remote.screen.getPrimaryDisplay().workAreaSize.width;
    vh = electron.remote.screen.getPrimaryDisplay().workAreaSize.height;
    a = $('.screenshot');
    scale = clamp(1, 20, scale);
    ox = vw * (scale - 1) / (2 * scale);
    oy = vh * (scale - 1) / (2 * scale);
    offset.x = clamp(-ox, ox, offset.x);
    offset.y = clamp(-oy, oy, offset.y);
    return a.style.transform = "scaleX(" + scale + ") scaleY(" + scale + ") translateX(" + offset.x + "px) translateY(" + offset.y + "px)";
};

onDblClick = function(event) {
    scale = 1;
    return transform();
};

onWheel = function(event) {
    var mp, newPos, newScale, oldPos, scaleFactor, vh, vw;
    scaleFactor = 1 - event.deltaY / 400.0;
    newScale = clamp(1, 20, scale * scaleFactor);
    vw = electron.remote.screen.getPrimaryDisplay().workAreaSize.width;
    vh = electron.remote.screen.getPrimaryDisplay().workAreaSize.height;
    mp = kpos(event).minus(kpos(vw, vh).times(0.5));
    oldPos = offset.plus(kpos(mp).times(1 / scale));
    newPos = offset.plus(kpos(mp).times(1 / newScale));
    offset.add(newPos.minus(oldPos));
    scale *= scaleFactor;
    return transform();
};

borderTimer = null;

onMouseMove = function(event) {
    if (!borderTimer) {
        return borderScroll();
    }
};

mapRange = function(value, valueRange, targetRange) {
    var clampedValue, relativeValue, targetWidth, valueWidth;
    targetWidth = targetRange[1] - targetRange[0];
    valueWidth = valueRange[1] - valueRange[0];
    clampedValue = clamp(valueRange[0], valueRange[1], value);
    relativeValue = (clampedValue - valueRange[0]) / valueWidth;
    return targetRange[0] + targetWidth * relativeValue;
};

scrollSpeed = 0;

doScroll = function() {
    var ms;
    transform();
    ms = mapRange(scrollSpeed, [0, 1], [1000 / 10, 1000 / 30]);
    return borderTimer = setTimeout(borderScroll, ms);
};

borderScroll = function() {
    var border, direction, mousePos, scroll, vh, vw;
    clearTimeout(borderTimer);
    borderTimer = null;
    mousePos = kpos(wc('mouse'));
    scroll = false;
    border = 200;
    vw = electron.remote.screen.getPrimaryDisplay().workAreaSize.width;
    vh = electron.remote.screen.getPrimaryDisplay().workAreaSize.height;
    direction = kpos(vw, vh).times(0.5).to(mousePos).mul(kpos(1 / vw, 1 / vh)).times(-1);
    if (mousePos.x < border) {
        scrollSpeed = (border - mousePos.x) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    } else if (mousePos.x > vw - border) {
        scrollSpeed = (border - (vw - mousePos.x)) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    }
    if (mousePos.y < border) {
        scrollSpeed = (border - mousePos.y) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    } else if (mousePos.y > vh - border) {
        scrollSpeed = (border - (vh - mousePos.y)) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    }
    if (scroll) {
        return doScroll();
    }
};

onDragStart = function(drag, event) {
    if (event.button !== 0) {
        if (event.button === 1) {
            done();
        }
        return 'skip';
    } else if (scale === 1) {
        done();
        return 'skip';
    }
};

onDragStop = function(drag, event) {};

onDragMove = function(drag, event) {
    offset.add(drag.delta.times(1 / scale));
    return transform();
};

module.exports = {
    start: start,
    init: init
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9vbS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLElBQUE7O0FBQUEsTUFBbUUsT0FBQSxDQUFRLEtBQVIsQ0FBbkUsRUFBRSxtQkFBRixFQUFVLGVBQVYsRUFBZ0IsZUFBaEIsRUFBc0IsaUJBQXRCLEVBQTZCLGVBQTdCLEVBQW1DLGlCQUFuQyxFQUEwQyxpQkFBMUMsRUFBaUQsZUFBakQsRUFBdUQsZUFBdkQsRUFBNkQ7O0FBRTdELEVBQUEsR0FBSyxPQUFBLENBQVEsTUFBUjs7QUFDTCxRQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBRVgsT0FBQSxHQUFVOztBQUVWLGNBQUEsR0FBaUIsU0FBQTtXQUNiLEtBQUssQ0FBQyxPQUFOLENBQWMsS0FBSyxDQUFDLElBQU4sQ0FBVyxLQUFLLENBQUMsR0FBTixDQUFVLGlCQUFWLEVBQTZCLEtBQUssQ0FBQyxPQUFOLENBQWMsV0FBZCxDQUE3QixDQUFYLEVBQW9FLGdCQUFwRSxDQUFkO0FBRGE7O0FBR2pCLGNBQUEsR0FBaUIsU0FBQTtXQUNiLEtBQUssQ0FBQyxPQUFOLENBQWMsY0FBQSxDQUFBLENBQWQ7QUFEYTs7QUFTakIsS0FBQSxHQUFRLFNBQUMsR0FBRDs7UUFBQyxNQUFJOztJQUVULEVBQUEsQ0FBRyxZQUFILEVBQWdCLGNBQUEsQ0FBQSxDQUFoQjtXQUNBLFlBQUEsQ0FBYSxHQUFiO0FBSEk7O0FBV1IsWUFBQSxHQUFlLFNBQUMsR0FBRDtBQUVYLFFBQUE7SUFBQSxJQUFBLEdBQU8sRUFBQSxDQUFHLE1BQUgsRUFBVSxTQUFWLENBQXFCLENBQUEsQ0FBQTtJQUM1QixJQUFHLElBQUksQ0FBQyxNQUFMLEtBQWUsUUFBbEI7UUFDSSxFQUFBLENBQUcsU0FBSCxFQUFhLE1BQWI7UUFDQSxPQUFBLEdBQVUsS0FGZDtLQUFBLE1BQUE7UUFJSSxPQUFBLEdBQVUsTUFKZDs7SUFPQSxFQUFBLEdBQUssUUFBUSxDQUFDLE1BQU0sQ0FBQyxp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QUMsTUFBTixLQUFnQixDQUFuQjtZQUNJLElBQUEsQ0FBQSxFQURKOztBQUVBLGVBQU8sT0FIWDtLQUFBLE1BSUssSUFBRyxLQUFBLEtBQVMsQ0FBWjtRQUNELElBQUEsQ0FBQTtBQUNBLGVBQU8sT0FGTjs7QUFOSzs7QUFVZCxVQUFBLEdBQWEsU0FBQyxJQUFELEVBQU8sS0FBUCxHQUFBOztBQUNiLFVBQUEsR0FBYSxTQUFDLElBQUQsRUFBTyxLQUFQO0lBRVQsTUFBTSxDQUFDLEdBQVAsQ0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQVgsQ0FBaUIsQ0FBQSxHQUFFLEtBQW5CLENBQVg7V0FDQSxTQUFBLENBQUE7QUFIUzs7QUFLYixNQUFNLENBQUMsT0FBUCxHQUNJO0lBQUEsS0FBQSxFQUFNLEtBQU47SUFDQSxJQUFBLEVBQUssSUFETCIsInNvdXJjZXNDb250ZW50IjpbIiMgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwICAgICAwMCAgXG4jICAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAgIDAwMCAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICBcbiMgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgXG4jIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuXG57IGNoaWxkcCwgcG9zdCwga2FyZywgc2xhc2gsIGRyYWcsIHByZWZzLCBjbGFtcCwga3Bvcywga2xvZywgJCB9ID0gcmVxdWlyZSAna3hrJ1xuXG53YyA9IHJlcXVpcmUgJy4vd2MnXG5lbGVjdHJvbiA9IHJlcXVpcmUgJ2VsZWN0cm9uJ1xuXG50YXNrYmFyID0gZmFsc2Vcblxuc2NyZWVuc2hvdFBhdGggPSAtPlxuICAgIHNsYXNoLnJlc29sdmUgc2xhc2guam9pbiBwcmVmcy5nZXQoJ3NjcmVlbmhvdEZvbGRlcicsIHNsYXNoLnJlc29sdmUgXCJ+L0Rlc2t0b3BcIiksICdzY3JlZW5zaG90LnBuZydcbiAgICBcbnNjcmVlbnNob3RGaWxlID0gLT5cbiAgICBzbGFzaC51bnNsYXNoIHNjcmVlbnNob3RQYXRoKClcbiAgICBcbiMgIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgICAgMDAwICAgICBcbiMgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuXG5zdGFydCA9IChvcHQ9e30pIC0+XG4gICAgXG4gICAgd2MgJ3NjcmVlbnNob3QnIHNjcmVlbnNob3RGaWxlKClcbiAgICBjcmVhdGVXaW5kb3cgb3B0XG4gICAgXG4jIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICBcbiMgMDAwMDAwMDAwICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAwMCAgICAgMDAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAgICAgIDAwICBcblxuY3JlYXRlV2luZG93ID0gKG9wdCkgLT5cbiAgICAgICAgXG4gICAgaW5mbyA9IHdjKCdpbmZvJyAndGFza2JhcicpWzBdXG4gICAgaWYgaW5mby5zdGF0dXMgIT0gJ2hpZGRlbidcbiAgICAgICAgd2MgJ3Rhc2tiYXInICdoaWRlJ1xuICAgICAgICB0YXNrYmFyID0gdHJ1ZVxuICAgIGVsc2VcbiAgICAgICAgdGFza2JhciA9IGZhbHNlXG4gICAgICAgIFxuICAgICMgc3MgPSB3YyAnc2NyZWVuJyAnc2l6ZSdcbiAgICBzcyA9IGVsZWN0cm9uLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZVxuICAgIFxuICAgIHdpbiA9IG5ldyBlbGVjdHJvbi5Ccm93c2VyV2luZG93XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMwMDAwMDAwMCdcbiAgICAgICAgdHJhbnNwYXJlbnQ6ICAgICB0cnVlXG4gICAgICAgIHByZWxvYWRXaW5kb3c6ICAgdHJ1ZVxuICAgICAgICB4OiAgICAgICAgICAgICAgIDAgXG4gICAgICAgIHk6ICAgICAgICAgICAgICAgMCBcbiAgICAgICAgd2lkdGg6ICAgICAgICAgICBzcy53aWR0aFxuICAgICAgICBoZWlnaHQ6ICAgICAgICAgIHNzLmhlaWdodFxuICAgICAgICBoYXNTaGFkb3c6ICAgICAgIGZhbHNlXG4gICAgICAgIHJlc2l6YWJsZTogICAgICAgZmFsc2VcbiAgICAgICAgZnJhbWU6ICAgICAgICAgICBmYWxzZVxuICAgICAgICB0aGlja0ZyYW1lOiAgICAgIGZhbHNlXG4gICAgICAgIHNob3c6ICAgICAgICAgICAgdHJ1ZVxuICAgICAgICBmdWxsc2NyZWVuOiAgICAgIG5vdCBvcHQuZGVidWdcbiAgICAgICAgd2ViUHJlZmVyZW5jZXM6XG4gICAgICAgICAgICBub2RlSW50ZWdyYXRpb246IHRydWVcbiAgICAgICAgICAgIHdlYlNlY3VyaXR5OiAgICAgZmFsc2VcbiAgICAgICAgICAgIFxuICAgIHBuZ0ZpbGUgPSBzbGFzaC5maWxlVXJsIHNjcmVlbnNob3RQYXRoKClcbiAgICBcbiAgICBodG1sID0gXCJcIlwiXG4gICAgICAgIDxoZWFkPlxuICAgICAgICA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+XG4gICAgICAgICAgICBib2R5IHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogICAgICAgaGlkZGVuO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogICAgICAgICAxcHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAgICAgICAgIG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbWcge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAgICAgICBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBsZWZ0OiAgICAgICAgICAgMDtcbiAgICAgICAgICAgICAgICB0b3A6ICAgICAgICAgICAgMDtcbiAgICAgICAgICAgICAgICB3aWR0aDogICAgICAgICAgI3tzcy53aWR0aH1weDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICAgICAgICAgI3tzcy5oZWlnaHR9cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICAgIDwvaGVhZD5cbiAgICAgICAgPGJvZHk+XG4gICAgICAgIDxpbWcgY2xhc3M9XCJzY3JlZW5zaG90XCIgdGFiaW5kZXg9MCBzcmM9XCIje3BuZ0ZpbGV9XCIvPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICAgdmFyIHB0aCA9IHByb2Nlc3MucmVzb3VyY2VzUGF0aCArIFwiL2FwcC9qcy96b29tLmpzXCI7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5yZXNvdXJjZXNQYXRoLmluZGV4T2YoXCJub2RlX21vZHVsZXNcXFxcXFxcXGVsZWN0cm9uXFxcXFxcXFxkaXN0XFxcXFxcXFxyZXNvdXJjZXNcIik+PTApIHsgcHRoID0gcHJvY2Vzcy5jd2QoKSArIFwiL2pzL3pvb20uanNcIjsgfVxuICAgICAgICAgICAgY29uc29sZS5sb2cocHRoLCBwcm9jZXNzLnJlc291cmNlc1BhdGgpO1xuICAgICAgICAgICAgcmVxdWlyZShwdGgpLmluaXQoKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDwvYm9keT5cbiAgICBcIlwiXCJcblxuICAgIGRhdGEgPSBcImRhdGE6dGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUkkoaHRtbCkgXG4gICAgd2luLmxvYWRVUkwgZGF0YSwgYmFzZVVSTEZvckRhdGFVUkw6c2xhc2guZmlsZVVybCBfX2Rpcm5hbWUgKyAnL2luZGV4Lmh0bWwnXG5cbiAgICB3aW4uZGVidWcgPSBvcHQuZGVidWdcbiAgICBcbiAgICB3aW4ub24gJ3JlYWR5LXRvLXNob3cnIC0+XG4gICAgICAgIFxuICAgIGlmIG9wdC5kZWJ1Z1xuICAgICAgICB3aW4ud2ViQ29udGVudHMub3BlbkRldlRvb2xzKClcbiAgICBlbHNlXG4gICAgICAgIHdpbi5tYXhpbWl6ZSgpXG4gICAgd2luXG5cbiMgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAgIFxuIyAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgXG5cbmRvbmUgPSAtPiBcbiAgICB3aW4gPSBlbGVjdHJvbi5yZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpXG4gICAgd2luLmNsb3NlKClcbiAgICBpZiB0YXNrYmFyXG4gICAgICAgIHdjICd0YXNrYmFyJyAnc2hvdydcbiAgICBpZiB3aW4uZGVidWcgdGhlbiBlbGVjdHJvbi5yZW1vdGUuYXBwLmV4aXQgMFxuICAgIFxuIyAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwMDAgICAgXG4jIDAwMCAgMDAwMCAgMDAwICAwMDAgICAgIDAwMCAgICAgICBcbiMgMDAwICAwMDAgMCAwMDAgIDAwMCAgICAgMDAwICAgICAgIFxuIyAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAwMDAgICAgICAgXG4jIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgXG4gICAgICAgIFxuaW5pdCA9IC0+XG4gICAgXG4gICAgd2luID0gZWxlY3Ryb24ucmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKVxuICAgIFxuICAgIGEgPSQgJy5zY3JlZW5zaG90J1xuICAgIFxuICAgIGEub25kYmxjbGljayAgID0gb25EYmxDbGlja1xuICAgIGEub25tb3VzZW1vdmUgID0gb25Nb3VzZU1vdmVcbiAgICBhLm9ubW91c2V3aGVlbCA9IG9uV2hlZWxcbiAgICBhLm9ua2V5ZG93biAgICA9IGRvbmVcbiAgICBcbiAgICBpZiBub3Qgd2luLmRlYnVnXG4gICAgICAgIGEub25ibHVyID0gZG9uZVxuICAgICAgICBcbiAgICBuZXcgZHJhZ1xuICAgICAgICB0YXJnZXQ6ICBhXG4gICAgICAgIG9uU3RhcnQ6IG9uRHJhZ1N0YXJ0XG4gICAgICAgIG9uTW92ZTogIG9uRHJhZ01vdmVcbiAgICAgICAgb25TdG9wOiAgb25EcmFnU3RvcFxuICAgICAgICBcbiAgICBhLmZvY3VzKClcblxuIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwICAgICAwMCAgXG4jICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiMgICAgMDAwICAgICAwMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMDAgIFxuIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgICAgICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgXG4jICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcblxuc2NhbGUgID0gMS4wXG5vZmZzZXQgPSBrcG9zIDAgMFxuXG50cmFuc2Zvcm0gPSAtPlxuICAgIFxuICAgIHZ3ID0gZWxlY3Ryb24ucmVtb3RlLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZS53aWR0aFxuICAgIHZoID0gZWxlY3Ryb24ucmVtb3RlLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZS5oZWlnaHRcbiAgICBcbiAgICBhID0kICcuc2NyZWVuc2hvdCdcblxuICAgIHNjYWxlID0gY2xhbXAgMSAyMCBzY2FsZVxuICAgIFxuICAgIG94ID0gdncgKiAoc2NhbGUtMSkvKDIqc2NhbGUpXG4gICAgb3kgPSB2aCAqIChzY2FsZS0xKS8oMipzY2FsZSlcbiAgICBvZmZzZXQueCA9IGNsYW1wIC1veCwgb3gsIG9mZnNldC54XG4gICAgb2Zmc2V0LnkgPSBjbGFtcCAtb3ksIG95LCBvZmZzZXQueVxuICAgIFxuICAgIGEuc3R5bGUudHJhbnNmb3JtID0gXCJzY2FsZVgoI3tzY2FsZX0pIHNjYWxlWSgje3NjYWxlfSkgdHJhbnNsYXRlWCgje29mZnNldC54fXB4KSB0cmFuc2xhdGVZKCN7b2Zmc2V0Lnl9cHgpXCJcblxub25EYmxDbGljayA9IChldmVudCkgLT4gXG4gICAgXG4gICAgc2NhbGUgPSAxIFxuICAgIHRyYW5zZm9ybSgpXG4gICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgIFxuIyAwMCAgICAgMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICBcblxub25XaGVlbCA9IChldmVudCkgLT5cbiAgICBcbiAgICBcbiAgICBzY2FsZUZhY3RvciA9IDEgLSBldmVudC5kZWx0YVkgLyA0MDAuMFxuICAgIG5ld1NjYWxlID0gY2xhbXAgMSAyMCBzY2FsZSAqIHNjYWxlRmFjdG9yXG4gICAgXG4gICAgdncgPSBlbGVjdHJvbi5yZW1vdGUuc2NyZWVuLmdldFByaW1hcnlEaXNwbGF5KCkud29ya0FyZWFTaXplLndpZHRoXG4gICAgdmggPSBlbGVjdHJvbi5yZW1vdGUuc2NyZWVuLmdldFByaW1hcnlEaXNwbGF5KCkud29ya0FyZWFTaXplLmhlaWdodFxuICAgIFxuICAgIG1wID0ga3BvcyhldmVudCkubWludXMga3Bvcyh2dywgdmgpLnRpbWVzIDAuNVxuICAgIFxuICAgIG9sZFBvcyA9IG9mZnNldC5wbHVzIGtwb3MobXApLnRpbWVzIDEvc2NhbGVcbiAgICBuZXdQb3MgPSBvZmZzZXQucGx1cyBrcG9zKG1wKS50aW1lcyAxL25ld1NjYWxlXG4gICAgb2Zmc2V0LmFkZCBuZXdQb3MubWludXMgb2xkUG9zXG4gICAgXG4gICAgc2NhbGUgKj0gc2NhbGVGYWN0b3JcbiAgICBcbiAgICB0cmFuc2Zvcm0oKVxuICAgIFxuYm9yZGVyVGltZXIgPSBudWxsXG5vbk1vdXNlTW92ZSA9IChldmVudCkgLT5cbiAgICBpZiBub3QgYm9yZGVyVGltZXJcbiAgICAgICAgYm9yZGVyU2Nyb2xsKClcblxubWFwUmFuZ2UgPSAodmFsdWUsIHZhbHVlUmFuZ2UsIHRhcmdldFJhbmdlKSAtPlxuICAgIHRhcmdldFdpZHRoICAgPSB0YXJnZXRSYW5nZVsxXSAtIHRhcmdldFJhbmdlWzBdXG4gICAgdmFsdWVXaWR0aCAgICA9IHZhbHVlUmFuZ2VbMV0gIC0gdmFsdWVSYW5nZVswXVxuICAgIGNsYW1wZWRWYWx1ZSAgPSBjbGFtcCB2YWx1ZVJhbmdlWzBdLCB2YWx1ZVJhbmdlWzFdLCB2YWx1ZVxuICAgIHJlbGF0aXZlVmFsdWUgPSAoY2xhbXBlZFZhbHVlIC0gdmFsdWVSYW5nZVswXSkgLyB2YWx1ZVdpZHRoXG4gICAgdGFyZ2V0UmFuZ2VbMF0gKyB0YXJnZXRXaWR0aCAqIHJlbGF0aXZlVmFsdWVcbiAgICAgICAgXG5zY3JvbGxTcGVlZCA9IDBcbmRvU2Nyb2xsID0gLT5cbiAgICB0cmFuc2Zvcm0oKVxuICAgIG1zID0gbWFwUmFuZ2Ugc2Nyb2xsU3BlZWQsIFswIDFdLCBbMTAwMC8xMCAxMDAwLzMwXVxuICAgIGJvcmRlclRpbWVyID0gc2V0VGltZW91dCBib3JkZXJTY3JvbGwsIG1zXG4gICAgXG5ib3JkZXJTY3JvbGwgPSAtPlxuXG4gICAgY2xlYXJUaW1lb3V0IGJvcmRlclRpbWVyXG4gICAgYm9yZGVyVGltZXIgPSBudWxsXG4gICAgXG4gICAgbW91c2VQb3MgPSBrcG9zIHdjICdtb3VzZSdcbiAgICBcbiAgICBzY3JvbGwgPSBmYWxzZVxuICAgIGJvcmRlciA9IDIwMFxuICAgIFxuICAgIHZ3ID0gZWxlY3Ryb24ucmVtb3RlLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZS53aWR0aFxuICAgIHZoID0gZWxlY3Ryb24ucmVtb3RlLnNjcmVlbi5nZXRQcmltYXJ5RGlzcGxheSgpLndvcmtBcmVhU2l6ZS5oZWlnaHRcbiAgICBcbiAgICBkaXJlY3Rpb24gPSBrcG9zKHZ3LHZoKS50aW1lcygwLjUpLnRvKG1vdXNlUG9zKS5tdWwoa3BvcygxL3Z3LDEvdmgpKS50aW1lcygtMSlcbiAgICBcbiAgICBpZiBtb3VzZVBvcy54IDwgYm9yZGVyXG4gICAgICAgIHNjcm9sbFNwZWVkID0gKGJvcmRlci1tb3VzZVBvcy54KS9ib3JkZXJcbiAgICAgICAgb2Zmc2V0LmFkZCBkaXJlY3Rpb24udGltZXMgKDEuMCtzY3JvbGxTcGVlZCozMCkvc2NhbGVcbiAgICAgICAgc2Nyb2xsID0gdHJ1ZVxuICAgIGVsc2UgaWYgbW91c2VQb3MueCA+IHZ3LWJvcmRlclxuICAgICAgICBzY3JvbGxTcGVlZCA9IChib3JkZXItKHZ3LW1vdXNlUG9zLngpKS9ib3JkZXJcbiAgICAgICAgb2Zmc2V0LmFkZCBkaXJlY3Rpb24udGltZXMgKDEuMCtzY3JvbGxTcGVlZCozMCkvc2NhbGVcbiAgICAgICAgc2Nyb2xsID0gdHJ1ZVxuICAgICAgICBcbiAgICBpZiBtb3VzZVBvcy55IDwgYm9yZGVyXG4gICAgICAgIHNjcm9sbFNwZWVkID0gKGJvcmRlci1tb3VzZVBvcy55KS9ib3JkZXJcbiAgICAgICAgb2Zmc2V0LmFkZCBkaXJlY3Rpb24udGltZXMgKDEuMCtzY3JvbGxTcGVlZCozMCkvc2NhbGVcbiAgICAgICAgc2Nyb2xsID0gdHJ1ZVxuICAgIGVsc2UgaWYgbW91c2VQb3MueSA+IHZoLWJvcmRlclxuICAgICAgICBzY3JvbGxTcGVlZCA9IChib3JkZXItKHZoLW1vdXNlUG9zLnkpKS9ib3JkZXJcbiAgICAgICAgb2Zmc2V0LmFkZCBkaXJlY3Rpb24udGltZXMgKDEuMCtzY3JvbGxTcGVlZCozMCkvc2NhbGVcbiAgICAgICAgc2Nyb2xsID0gdHJ1ZVxuICAgICAgICBcbiAgICBpZiBzY3JvbGxcbiAgICAgICAgZG9TY3JvbGwoKVxuICAgIFxuIyAwMDAwMDAwICAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIFxuIyAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgIDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIFxuXG5vbkRyYWdTdGFydCA9IChkcmFnLCBldmVudCkgLT4gXG4gICAgXG4gICAgaWYgZXZlbnQuYnV0dG9uICE9IDBcbiAgICAgICAgaWYgZXZlbnQuYnV0dG9uID09IDFcbiAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICByZXR1cm4gJ3NraXAnXG4gICAgZWxzZSBpZiBzY2FsZSA9PSAxXG4gICAgICAgIGRvbmUoKVxuICAgICAgICByZXR1cm4gJ3NraXAnXG4gICAgXG5vbkRyYWdTdG9wID0gKGRyYWcsIGV2ZW50KSAtPiBcbm9uRHJhZ01vdmUgPSAoZHJhZywgZXZlbnQpIC0+IFxuICAgIFxuICAgIG9mZnNldC5hZGQgZHJhZy5kZWx0YS50aW1lcyAxL3NjYWxlXG4gICAgdHJhbnNmb3JtKClcbiAgICBcbm1vZHVsZS5leHBvcnRzID0gXG4gICAgc3RhcnQ6c3RhcnRcbiAgICBpbml0OmluaXRcbiAgICBcbiAgICBcbiAgICAiXX0=
//# sourceURL=../coffee/zoom.coffee