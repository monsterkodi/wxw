// koffee 1.3.0
var $, borderScroll, borderTimer, childp, clamp, createWindow, doScroll, done, drag, dragging, electron, init, karg, klog, kpos, mapRange, offset, onDblClick, onDragMove, onDragStart, onDragStop, onMouseMove, onWheel, post, prefs, ref, scale, screenshotFile, screenshotPath, scrollSpeed, slash, start, startScroll, taskbar, transform, wc;

ref = require('kxk'), childp = ref.childp, post = ref.post, karg = ref.karg, slash = ref.slash, drag = ref.drag, prefs = ref.prefs, clamp = ref.clamp, kpos = ref.kpos, klog = ref.klog, $ = ref.$;

wc = require('./wc');

electron = require('electron');

taskbar = false;

screenshotPath = function() {
    return slash.resolve(slash.join(prefs.get('screenhotFolder', slash.resolve("~/Desktop")), 'screenshot.png'));
};

screenshotFile = function() {
    return slash.unslash(screenshotPath());
};

start = function(opt) {
    if (opt == null) {
        opt = {};
    }
    wc('screenshot', screenshotFile());
    return createWindow(opt);
};

createWindow = function(opt) {
    var data, html, pngFile, ss, win;
    ss = electron.screen.getPrimaryDisplay().size;
    win = new electron.BrowserWindow({
        backgroundColor: '#00000000',
        x: 0,
        y: 0,
        width: ss.width,
        height: ss.height,
        minWidth: ss.width,
        minHeight: ss.height,
        hasShadow: false,
        resizable: false,
        frame: false,
        thickFrame: false,
        fullscreen: false,
        transparent: true,
        preloadWindow: true,
        alwaysOnTop: true,
        enableLargerThanScreen: true,
        acceptFirstMouse: true,
        show: true,
        webPreferences: {
            nodeIntegration: true,
            webSecurity: false
        }
    });
    pngFile = slash.fileUrl(screenshotPath());
    html = "<head>\n<style type=\"text/css\">\n    body {\n        overflow:       hidden;\n        margin:         1px;\n        border:         none;\n    }\n    img {\n        position:       absolute;\n        left:           0;\n        top:            0;\n        width:          " + ss.width + "px;\n        height:         " + ss.height + "px;\n    }\n</style>\n</head>\n<body>\n<img class=\"screenshot\" tabindex=0 src=\"" + pngFile + "\"/>\n<script>\n    var pth = process.resourcesPath + \"/app/js/zoom.js\";\n    if (process.resourcesPath.indexOf(\"node_modules\\\\electron\\\\dist\\\\resources\")>=0) { pth = process.cwd() + \"/js/zoom.js\"; }\n    console.log(pth, process.resourcesPath);\n    require(pth).init();\n</script>\n</body>";
    data = "data:text/html;charset=utf-8," + encodeURI(html);
    win.loadURL(data, {
        baseURLForDataURL: slash.fileUrl(__dirname + '/index.html')
    });
    win.debug = opt.debug;
    win.webContents.on('dom-ready', function() {
        var info;
        info = wc('info', 'taskbar')[0];
        if (info.status !== 'hidden') {
            return post.toWin(win.id, 'taskbar', true);
        } else {
            return post.toWin(win.id, 'taskbar', false);
        }
    });
    if (opt.debug) {
        win.webContents.openDevTools({
            mode: 'detach'
        });
    }
    return win;
};

done = function() {
    var win;
    win = electron.remote.getCurrentWindow();
    win.close();
    if (window.taskbar) {
        wc('taskbar', 'show');
    }
    if (win.debug) {
        return electron.remote.app.exit(0);
    }
};

init = function() {
    var a, win;
    post.on('taskbar', function(show) {
        return window.taskbar = show;
    });
    win = electron.remote.getCurrentWindow();
    a = $('.screenshot');
    a.ondblclick = onDblClick;
    a.onmousemove = onMouseMove;
    a.onmousewheel = onWheel;
    a.onkeydown = done;
    if (!win.debug) {
        a.onblur = done;
    }
    new drag({
        target: a,
        onStart: onDragStart,
        onMove: onDragMove,
        onStop: onDragStop
    });
    return a.focus();
};

scale = 1.0;

offset = kpos(0, 0);

dragging = false;

transform = function() {
    var a, ox, oy, ss;
    ss = electron.remote.screen.getPrimaryDisplay().size;
    a = $('.screenshot');
    scale = clamp(1, 20, scale);
    ox = ss.width * (scale - 1) / (2 * scale);
    oy = ss.height * (scale - 1) / (2 * scale);
    offset.x = clamp(-ox, ox, offset.x);
    offset.y = clamp(-oy, oy, offset.y);
    return a.style.transform = "scaleX(" + scale + ") scaleY(" + scale + ") translateX(" + offset.x + "px) translateY(" + offset.y + "px)";
};

onDblClick = function(event) {
    scale = 1;
    return transform();
};

onWheel = function(event) {
    var mp, newPos, newScale, oldPos, scaleFactor, ss;
    scaleFactor = 1 - event.deltaY / 400.0;
    newScale = clamp(1, 20, scale * scaleFactor);
    if (newScale === 1) {
        dragging = false;
    }
    ss = electron.remote.screen.getPrimaryDisplay().size;
    mp = kpos(event).minus(kpos(ss.width, ss.height).times(0.5));
    oldPos = offset.plus(kpos(mp).times(1 / scale));
    newPos = offset.plus(kpos(mp).times(1 / newScale));
    offset.add(newPos.minus(oldPos));
    scale *= scaleFactor;
    return transform();
};

borderTimer = null;

onMouseMove = function(event) {
    if (!borderTimer) {
        return borderScroll();
    }
};

mapRange = function(value, valueRange, targetRange) {
    var clampedValue, relativeValue, targetWidth, valueWidth;
    targetWidth = targetRange[1] - targetRange[0];
    valueWidth = valueRange[1] - valueRange[0];
    clampedValue = clamp(valueRange[0], valueRange[1], value);
    relativeValue = (clampedValue - valueRange[0]) / valueWidth;
    return targetRange[0] + targetWidth * relativeValue;
};

scrollSpeed = 0;

doScroll = function() {
    transform();
    return startScroll();
};

startScroll = function() {
    var ms;
    ms = mapRange(scrollSpeed, [0, 1], [1000 / 10, 1000 / 30]);
    return borderTimer = setTimeout(borderScroll, ms);
};

borderScroll = function() {
    var border, direction, mousePos, scroll, ss;
    clearTimeout(borderTimer);
    borderTimer = null;
    if (dragging) {
        return;
    }
    mousePos = kpos(wc('mouse'));
    scroll = false;
    border = 200;
    ss = electron.remote.screen.getPrimaryDisplay().size;
    direction = kpos(ss.width, ss.height).times(0.5).to(mousePos).mul(kpos(1 / ss.width, 1 / ss.height)).times(-1);
    if (mousePos.x < border) {
        scrollSpeed = (border - mousePos.x) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    } else if (mousePos.x > ss.width - border) {
        scrollSpeed = (border - (ss.width - mousePos.x)) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    }
    if (mousePos.y < border) {
        scrollSpeed = (border - mousePos.y) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    } else if (mousePos.y > ss.height - border) {
        scrollSpeed = (border - (ss.height - mousePos.y)) / border;
        offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
        scroll = true;
    }
    if (scroll) {
        return doScroll();
    }
};

onDragStart = function(drag, event) {
    if (event.button !== 0) {
        if (event.button === 1) {
            done();
        }
        return 'skip';
    } else if (scale === 1) {
        done();
        return 'skip';
    }
    return dragging = true;
};

onDragStop = function(drag, event) {};

onDragMove = function(drag, event) {
    offset.add(drag.delta.times(1 / scale));
    return transform();
};

module.exports = {
    start: start,
    init: init
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/zoom.coffee