(function() {
  //  0000000   0000000  00000000   00000000  00000000  000   000  0000000   0000000    0000000   00     00  
  // 000       000       000   000  000       000       0000  000     000   000   000  000   000  000   000  
  // 0000000   000       0000000    0000000   0000000   000 0 000    000    000   000  000   000  000000000  
  //      000  000       000   000  000       000       000  0000   000     000   000  000   000  000 0 000  
  // 0000000    0000000  000   000  00000000  00000000  000   000  0000000   0000000    0000000   000   000  
  var $, borderScroll, borderTimer, childp, clamp, createWindow, doScroll, done, drag, electron, error, init, karg, log, mapRange, offset, onDblClick, onDragMove, onDragStart, onDragStop, onMouseMove, onWheel, pos, post, prefs, rect, robot, robotPos, scale, screenshotFile, scrollSpeed, slash, start, transform, vh, vw, zoomWin;

  ({childp, post, karg, slash, drag, prefs, clamp, pos, error, log, $} = require('kxk'));

  rect = require('./rect');

  electron = require('electron');

  robot = require('robotjs');

  zoomWin = null;

  vw = electron.screen.getPrimaryDisplay().workAreaSize.width;

  vh = electron.screen.getPrimaryDisplay().workAreaSize.height;

  screenshotFile = function() {
    return slash.unslash(slash.join(prefs.get('screenhotFolder', slash.resolve("~/Desktop")), 'screenshot.png'));
  };

  //  0000000  000000000   0000000   00000000   000000000  
  // 000          000     000   000  000   000     000     
  // 0000000      000     000000000  0000000       000     
  //      000     000     000   000  000   000     000     
  // 0000000      000     000   000  000   000     000     
  start = function(opt = {}) {
    var pngFile, screenshotexe;
    screenshotexe = slash.unslash(slash.resolve(slash.join(__dirname, '..', 'bin', 'screenshot.exe')));
    if (!slash.isFile(screenshotexe)) {
      screenshotexe = slash.swapExt(screenshotexe, 'bat');
    }
    return pngFile = childp.exec(`"${screenshotexe}" ${screenshotFile()}`, function(err) {
      if (err) {
        return error(err);
      }
      return createWindow(opt);
    });
  };

  // 000   000  000  000   000  0000000     0000000   000   000  
  // 000 0 000  000  0000  000  000   000  000   000  000 0 000  
  // 000000000  000  000 0 000  000   000  000   000  000000000  
  // 000   000  000  000  0000  000   000  000   000  000   000  
  // 00     00  000  000   000  0000000     0000000   00     00  
  createWindow = function(opt) {
    var html, pngFile, win;
    win = new electron.BrowserWindow({
      backgroundColor: '#00000000',
      transparent: true,
      preloadWindow: true,
      x: 0,
      y: 0,
      width: vw,
      height: vh,
      hasShadow: false,
      resizable: false,
      frame: false,
      thickFrame: false,
      show: true,
      fullscreen: !opt.debug,
      webPreferences: {
        webSecurity: false
      }
    });
    zoomWin = win;
    pngFile = screenshotFile();
    html = `<head>\n<style type="text/css">\n    body {\n        overflow:       hidden;\n        margin:         0;\n        border:         none;\n    }\n    #image {\n        position:       absolute;\n        left:           0;\n        top:            0;\n        width:          ${vw}px;\n        height:         ${vh}px;\n    }\n</style>\n</head>\n<body>\n<img id='image' tabindex=0 src="${pngFile}"/>\n<script>\n    var pth = process.resourcesPath + "/app/js/screenzoom.js";\n    if (process.resourcesPath.indexOf("node_modules\\\\electron\\\\dist\\\\resources")>=0) { pth = process.cwd() + "/js/screenzoom.js"; }\n    console.log(pth, process.resourcesPath);\n    require(pth).init();\n</script>\n</body>`;
    win.loadURL("data:text/html;charset=utf-8," + encodeURI(html));
    win.debug = opt.debug;
    win.on('ready-to-show', function() {});
    if (opt.debug) {
      win.webContents.openDevTools();
    } else {
      win.maximize();
    }
    return win;
  };

  
  // 000  000   000  000  000000000    
  // 000  0000  000  000     000       
  // 000  000 0 000  000     000       
  // 000  000  0000  000     000       
  // 000  000   000  000     000     
  done = function() {
    var win;
    win = electron.remote.getCurrentWindow();
    win.close();
    if (win.debug) {
      return electron.remote.app.exit(0);
    }
  };

  init = function() {
    var a, win;
    post.on('slog', function(text) {
      console.log('slog', text);
      return post.toMain('winlog', text);
    });
    win = electron.remote.getCurrentWindow();
    a = $('image');
    a.ondblclick = onDblClick;
    a.onmousemove = onMouseMove;
    a.onmousewheel = onWheel;
    a.onkeydown = done;
    if (!win.debug) {
      a.onblur = done;
    }
    new drag({
      target: a,
      onStart: onDragStart,
      onMove: onDragMove,
      onStop: onDragStop
    });
    return a.focus();
  };

  // 000000000  00000000    0000000   000   000   0000000  00000000   0000000   00000000   00     00  
  //    000     000   000  000   000  0000  000  000       000       000   000  000   000  000   000  
  //    000     0000000    000000000  000 0 000  0000000   000000    000   000  0000000    000000000  
  //    000     000   000  000   000  000  0000       000  000       000   000  000   000  000 0 000  
  //    000     000   000  000   000  000   000  0000000   000        0000000   000   000  000   000  
  scale = 1.0;

  offset = pos(0, 0);

  transform = function() {
    var a, ox, oy;
    a = $('image');
    scale = clamp(1, 20, scale);
    ox = vw * (scale - 1) / (2 * scale);
    oy = vh * (scale - 1) / (2 * scale);
    offset.x = clamp(-ox, ox, offset.x);
    offset.y = clamp(-oy, oy, offset.y);
    return a.style.transform = `scaleX(${scale}) scaleY(${scale}) translateX(${offset.x}px) translateY(${offset.y}px)`;
  };

  onDblClick = function(event) {
    scale = 1;
    return transform();
  };

  
  // 000   000  000   000  00000000  00000000  000      
  // 000 0 000  000   000  000       000       000      
  // 000000000  000000000  0000000   0000000   000      
  // 000   000  000   000  000       000       000      
  // 00     00  000   000  00000000  00000000  0000000  
  onWheel = function(event) {
    var mp, newPos, newScale, oldPos, scaleFactor;
    scaleFactor = 1 - event.deltaY / 400.0;
    newScale = clamp(1, 20, scale * scaleFactor);
    mp = pos(event).minus(pos(vw, vh).times(0.5));
    oldPos = offset.plus(pos(mp).times(1 / scale));
    newPos = offset.plus(pos(mp).times(1 / newScale));
    offset.add(newPos.minus(oldPos));
    scale *= scaleFactor;
    return transform();
  };

  robotPos = function() {
    return pos(robot.getMousePos()).div(pos(robot.getScreenSize().width, robot.getScreenSize().height)).mul(pos(vw, vh));
  };

  borderTimer = null;

  onMouseMove = function(event) {
    if (!borderTimer) {
      return borderScroll();
    }
  };

  mapRange = function(value, valueRange, targetRange) {
    var clampedValue, relativeValue, targetWidth, valueWidth;
    targetWidth = targetRange[1] - targetRange[0];
    valueWidth = valueRange[1] - valueRange[0];
    clampedValue = clamp(valueRange[0], valueRange[1], value);
    relativeValue = (clampedValue - valueRange[0]) / valueWidth;
    return targetRange[0] + targetWidth * relativeValue;
  };

  scrollSpeed = 0;

  doScroll = function() {
    var ms;
    transform();
    ms = mapRange(scrollSpeed, [0, 1], [1000 / 10, 1000 / 30]);
    return borderTimer = setTimeout(borderScroll, ms);
  };

  borderScroll = function() {
    var border, direction, mousePos, scroll;
    clearTimeout(borderTimer);
    borderTimer = null;
    mousePos = robotPos();
    scroll = false;
    border = 200;
    direction = pos(vw, vh).times(0.5).to(mousePos).mul(pos(1 / vw, 1 / vh)).times(-1);
    if (mousePos.x < border) {
      scrollSpeed = (border - mousePos.x) / border;
      offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
      scroll = true;
    } else if (mousePos.x > vw - border) {
      scrollSpeed = (border - (vw - mousePos.x)) / border;
      offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
      scroll = true;
    }
    if (mousePos.y < border) {
      scrollSpeed = (border - mousePos.y) / border;
      offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
      scroll = true;
    } else if (mousePos.y > vh - border) {
      scrollSpeed = (border - (vh - mousePos.y)) / border;
      offset.add(direction.times((1.0 + scrollSpeed * 30) / scale));
      scroll = true;
    }
    if (scroll) {
      return doScroll();
    }
  };

  
  // 0000000    00000000    0000000    0000000   
  // 000   000  000   000  000   000  000        
  // 000   000  0000000    000000000  000  0000  
  // 000   000  000   000  000   000  000   000  
  // 0000000    000   000  000   000   0000000   
  onDragStart = function(drag, event) {
    if (event.button !== 0) {
      if (event.button === 1) {
        done();
      }
      return 'skip';
    } else if (scale === 1) {
      done();
      return 'skip';
    }
  };

  onDragStop = function(drag, event) {};

  onDragMove = function(drag, event) {
    offset.add(drag.delta.times(1 / scale));
    return transform();
  };

  module.exports = {
    start: start,
    init: init
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:/Users/kodi/s/wxw/coffee/screenzoom.coffee