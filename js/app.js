// koffee 1.3.0

/*
000   000  000   000  000   000         0000000   00000000   00000000   
000 0 000   000 000   000 0 000        000   000  000   000  000   000  
000000000    00000    000000000        000000000  00000000   00000000   
000   000   000 000   000   000        000   000  000        000        
00     00  000   000  00     00        000   000  000        000
 */
var Menu, _, about, action, app, args, childp, electron, karg, klog, moveWindow, onAppSwitch, pkg, post, prefs, ref, showAbout, slash, swtch, tray, wc;

ref = require('kxk'), post = ref.post, prefs = ref.prefs, about = ref.about, slash = ref.slash, childp = ref.childp, karg = ref.karg, klog = ref.klog, _ = ref._;

wc = require('./wc');

pkg = require('../package.json');

electron = require('electron');

app = electron.app;

Menu = electron.Menu;

tray = null;

swtch = null;

args = karg("wxw\n    debug  . ? log debug    . = false . - D\n\nversion  " + pkg.version);

post.on('winlog', function(text) {
    return klog(">>> " + text);
});

action = function(act) {
    switch (act) {
        case 'maximize':
            return wc('maximize', 'top');
        case 'minimize':
            return wc('minimize', 'top');
        case 'taskbar':
            return wc('taskbar', 'toggle');
        case 'close':
            return wc('close', 'top');
        case 'screenzoom':
            return require('./zoom').start();
        case 'appswitch':
            return onAppSwitch();
        default:
            return moveWindow(act);
    }
};

moveWindow = function(dir) {
    var ar, b, base, d, h, info, ref1, sb, screen, sl, sr, st, w, wr, x, y;
    screen = wc('screen', 'user');
    ar = {
        w: screen.width,
        h: screen.height
    };
    if (info = wc('info', 'top')[0]) {
        base = slash.base(info.path);
        if (base === 'kachel' || base === 'kappo') {
            return;
        }
        if (base === 'electron' || base === 'ko' || base === 'konrad' || base === 'clippo' || base === 'klog' || base === 'kaligraf' || base === 'kalk' || base === 'uniko' || base === 'knot' || base === 'space' || base === 'ruler') {
            b = 0;
        } else {
            b = 10;
        }
        wr = {
            x: info.x,
            y: info.y,
            w: info.width,
            h: info.height
        };
        d = 2 * b;
        ref1 = (function() {
            switch (dir) {
                case 'left':
                    return [-b, 0, ar.w / 2 + d, ar.h + b];
                case 'right':
                    return [ar.w / 2 - b, 0, ar.w / 2 + d, ar.h + b];
                case 'down':
                    return [ar.w / 4 - b, 0, ar.w / 2 + d, ar.h + b];
                case 'up':
                    return [ar.w / 6 - b, 0, 2 / 3 * ar.w + d, ar.h + b];
                case 'topleft':
                    return [-b, 0, ar.w / 3 + d, ar.h / 2];
                case 'top':
                    return [ar.w / 3 - b, 0, ar.w / 3 + d, ar.h / 2];
                case 'topright':
                    return [2 / 3 * ar.w - b, 0, ar.w / 3 + d, ar.h / 2];
                case 'botleft':
                    return [-b, ar.h / 2 - b, ar.w / 3 + d, ar.h / 2 + d];
                case 'bot':
                    return [ar.w / 3 - b, ar.h / 2 - b, ar.w / 3 + d, ar.h / 2 + d];
                case 'botright':
                    return [2 / 3 * ar.w - b, ar.h / 2 - b, ar.w / 3 + d, ar.h / 2 + d];
            }
        })(), x = ref1[0], y = ref1[1], w = ref1[2], h = ref1[3];
        sl = 20 > Math.abs(wr.x - x);
        sr = 20 > Math.abs(wr.x + wr.w - (x + w));
        st = 20 > Math.abs(wr.y - y);
        sb = 20 > Math.abs(wr.y + wr.h - (y + h));
        if (sl && sr && st && sb) {
            switch (dir) {
                case 'left':
                    w = ar.w / 4 + d;
                    break;
                case 'right':
                    w = ar.w / 4 + d;
                    x = 3 * ar.w / 4 - b;
                    break;
                case 'down':
                    h = ar.h / 2 + d;
                    y = ar.h / 2 - b;
                    break;
                case 'up':
                    w = ar.w + d;
                    x = -b;
            }
        }
        return wc('bounds', info.hwnd, x, y, w, h);
    }
};

onAppSwitch = function() {
    if (!swtch) {
        swtch = require('./switch').start();
        return;
    }
    return post.toWin(swtch.id, 'nextApp');
};

showAbout = function() {
    return about({
        img: __dirname + "/../img/about.png",
        background: "#222",
        size: 300,
        pkg: pkg
    });
};

app.on('window-all-closed', function(event) {
    return event.preventDefault();
});

app.on('ready', function() {
    var a, i, keys, len, ref1, ref2, results;
    tray = new electron.Tray(__dirname + "/../img/menu.png");
    tray.on('click', showAbout);
    tray.on('double-click', function() {
        app.exit(0);
        return process.exit(0);
    });
    tray.setContextMenu(Menu.buildFromTemplate([
        {
            label: "Quit",
            click: function() {
                app.exit(0);
                return process.exit(0);
            }
        }, {
            label: "About",
            click: showAbout
        }
    ]));
    if ((ref1 = app.dock) != null) {
        ref1.hide();
    }
    keys = {
        left: 'ctrl+alt+left',
        right: 'ctrl+alt+right',
        up: 'ctrl+alt+up',
        down: 'ctrl+alt+down',
        topleft: 'ctrl+alt+1',
        botleft: 'ctrl+alt+2',
        topright: 'ctrl+alt+3',
        botright: 'ctrl+alt+4',
        top: 'ctrl+alt+5',
        bot: 'ctrl+alt+6',
        minimize: 'ctrl+alt+m',
        close: 'ctrl+alt+w',
        taskbar: 'ctrl+alt+t',
        appswitch: 'ctrl+tab',
        screenzoom: 'alt+z'
    };
    prefs.init({
        defaults: keys
    });
    ref2 = _.keys(keys);
    results = [];
    for (i = 0, len = ref2.length; i < len; i++) {
        a = ref2[i];
        results.push(electron.globalShortcut.register(prefs.get(a), (function(a) {
            return function() {
                return action(a);
            };
        })(a)));
    }
    return results;
});

if (app.requestSingleInstanceLock != null) {
    if (!app.requestSingleInstanceLock()) {
        app.quit();
    }
}

if (args.debug) {
    require('./zoom').start({
        debug: true
    });
}

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/app.coffee