(function() {
  /*
  000   000  000  000   000  000  000   000  00000000   0000000   
  000 0 000  000  0000  000  000  0000  000  000       000   000  
  000000000  000  000 0 000  000  000 0 000  000000    000   000  
  000   000  000  000  0000  000  000  0000  000       000   000  
  00     00  000  000   000  000  000   000  000        0000000   
  */
  var isMinimized, kernel, ref, slash, user, wchar, winInfo, winTitle, zorder;

  ({slash} = require('kxk'));

  user = require('./user');

  kernel = require('./kernel');

  zorder = require('./zorder');

  ref = require('ref');

  wchar = require('ref-wchar');

  winTitle = function(hWnd) {
    var titleBuffer, titleClean, titleLength;
    titleLength = user.GetWindowTextLengthW(hWnd) + 2;
    titleBuffer = Buffer.alloc(titleLength * 2);
    user.GetWindowTextW(hWnd, titleBuffer, titleLength);
    titleClean = ref.reinterpretUntilZeros(titleBuffer, wchar.size);
    return wchar.toString(titleClean);
  };

  isMinimized = function(hWnd) {
    var GWL_STYLE, WS_MINIMIZE;
    GWL_STYLE = -16;
    WS_MINIMIZE = 0x20000000;
    return user.GetWindowLongW(hWnd, GWL_STYLE) & WS_MINIMIZE;
  };

  winInfo = function(hWnd) {
    var foreground, path, pathBuffer, pathLength, pathString, procBuffer, procHandle, procID, threadID;
    procBuffer = ref.alloc('uint32');
    threadID = user.GetWindowThreadProcessId(hWnd, procBuffer);
    procID = ref.get(procBuffer);
    procHandle = kernel.OpenProcess(0x1000, false, procID);
    pathBuffer = Buffer.alloc(10000);
    pathLength = ref.alloc('uint32', 5000);
    kernel.QueryFullProcessImageNameW(procHandle, 0, pathBuffer, pathLength);
    pathString = wchar.toString(ref.reinterpretUntilZeros(pathBuffer, wchar.size));
    path = pathString && slash.path(pathString) || '';
    foreground = hWnd === user.GetForegroundWindow();
    kernel.CloseHandle(procHandle);
    return {
      hwnd: hWnd,
      zOrder: zorder(hWnd),
      title: winTitle(hWnd),
      minimized: isMinimized(hWnd),
      foreground: foreground,
      winID: ref.address(hWnd),
      procID: procID,
      threadID: threadID,
      path: path
    };
  };

  module.exports = winInfo;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luaW5mby5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIuLi9jb2ZmZWUvd2luaW5mby5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQTs7Ozs7OztBQUFBLE1BQUEsV0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQTs7RUFRQSxDQUFBLENBQUUsS0FBRixDQUFBLEdBQVksT0FBQSxDQUFRLEtBQVIsQ0FBWjs7RUFFQSxJQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0VBQ1QsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztFQUNULE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7RUFDVCxHQUFBLEdBQVMsT0FBQSxDQUFRLEtBQVI7O0VBQ1QsS0FBQSxHQUFTLE9BQUEsQ0FBUSxXQUFSOztFQUVULFFBQUEsR0FBVyxRQUFBLENBQUMsSUFBRCxDQUFBO0FBRVAsUUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBO0lBQUEsV0FBQSxHQUFjLElBQUksQ0FBQyxvQkFBTCxDQUEwQixJQUExQixDQUFBLEdBQWdDO0lBQzlDLFdBQUEsR0FBYyxNQUFNLENBQUMsS0FBUCxDQUFhLFdBQUEsR0FBYyxDQUEzQjtJQUNkLElBQUksQ0FBQyxjQUFMLENBQW9CLElBQXBCLEVBQTBCLFdBQTFCLEVBQXVDLFdBQXZDO0lBQ0EsVUFBQSxHQUFhLEdBQUcsQ0FBQyxxQkFBSixDQUEwQixXQUExQixFQUF1QyxLQUFLLENBQUMsSUFBN0M7V0FDYixLQUFLLENBQUMsUUFBTixDQUFlLFVBQWY7RUFOTzs7RUFRWCxXQUFBLEdBQWMsUUFBQSxDQUFDLElBQUQsQ0FBQTtBQUVWLFFBQUEsU0FBQSxFQUFBO0lBQUEsU0FBQSxHQUFjLENBQUM7SUFDZixXQUFBLEdBQWM7V0FDZCxJQUFJLENBQUMsY0FBTCxDQUFvQixJQUFwQixFQUEwQixTQUExQixDQUFBLEdBQXVDO0VBSjdCOztFQU1kLE9BQUEsR0FBVSxRQUFBLENBQUMsSUFBRCxDQUFBO0FBRU4sUUFBQSxVQUFBLEVBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBO0lBQUEsVUFBQSxHQUFhLEdBQUcsQ0FBQyxLQUFKLENBQVUsUUFBVjtJQUNiLFFBQUEsR0FBYSxJQUFJLENBQUMsd0JBQUwsQ0FBOEIsSUFBOUIsRUFBb0MsVUFBcEM7SUFDYixNQUFBLEdBQWEsR0FBRyxDQUFDLEdBQUosQ0FBUSxVQUFSO0lBRWIsVUFBQSxHQUFhLE1BQU0sQ0FBQyxXQUFQLENBQW1CLE1BQW5CLEVBQTJCLEtBQTNCLEVBQWtDLE1BQWxDO0lBQ2IsVUFBQSxHQUFhLE1BQU0sQ0FBQyxLQUFQLENBQWEsS0FBYjtJQUNiLFVBQUEsR0FBYSxHQUFHLENBQUMsS0FBSixDQUFVLFFBQVYsRUFBb0IsSUFBcEI7SUFDYixNQUFNLENBQUMsMEJBQVAsQ0FBa0MsVUFBbEMsRUFBOEMsQ0FBOUMsRUFBaUQsVUFBakQsRUFBNkQsVUFBN0Q7SUFDQSxVQUFBLEdBQWEsS0FBSyxDQUFDLFFBQU4sQ0FBZSxHQUFHLENBQUMscUJBQUosQ0FBMEIsVUFBMUIsRUFBc0MsS0FBSyxDQUFDLElBQTVDLENBQWY7SUFDYixJQUFBLEdBQWEsVUFBQSxJQUFlLEtBQUssQ0FBQyxJQUFOLENBQVcsVUFBWCxDQUFmLElBQXlDO0lBRXRELFVBQUEsR0FBYSxJQUFBLEtBQVEsSUFBSSxDQUFDLG1CQUFMLENBQUE7SUFFckIsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsVUFBbkI7V0FFQTtNQUFBLElBQUEsRUFBWSxJQUFaO01BQ0EsTUFBQSxFQUFZLE1BQUEsQ0FBWSxJQUFaLENBRFo7TUFFQSxLQUFBLEVBQVksUUFBQSxDQUFZLElBQVosQ0FGWjtNQUdBLFNBQUEsRUFBWSxXQUFBLENBQVksSUFBWixDQUhaO01BSUEsVUFBQSxFQUFZLFVBSlo7TUFLQSxLQUFBLEVBQVksR0FBRyxDQUFDLE9BQUosQ0FBWSxJQUFaLENBTFo7TUFNQSxNQUFBLEVBQVksTUFOWjtNQU9BLFFBQUEsRUFBWSxRQVBaO01BUUEsSUFBQSxFQUFZO0lBUlo7RUFqQk07O0VBMkJWLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBekRqQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIFxuMDAwIDAgMDAwICAwMDAgIDAwMDAgIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMDAwICAwMDAgIDAwMCAwIDAwMCAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMCAgICAwMDAgICAwMDAgIFxuMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMCAgMDAwICAwMDAgIDAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAgICAgIDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwMDAwMCAgIFxuIyMjXG5cbnsgc2xhc2ggfSA9IHJlcXVpcmUgJ2t4aydcblxudXNlciAgID0gcmVxdWlyZSAnLi91c2VyJ1xua2VybmVsID0gcmVxdWlyZSAnLi9rZXJuZWwnXG56b3JkZXIgPSByZXF1aXJlICcuL3pvcmRlcidcbnJlZiAgICA9IHJlcXVpcmUgJ3JlZidcbndjaGFyICA9IHJlcXVpcmUgJ3JlZi13Y2hhcidcblxud2luVGl0bGUgPSAoaFduZCkgLT5cblxuICAgIHRpdGxlTGVuZ3RoID0gdXNlci5HZXRXaW5kb3dUZXh0TGVuZ3RoVyhoV25kKSsyXG4gICAgdGl0bGVCdWZmZXIgPSBCdWZmZXIuYWxsb2MgdGl0bGVMZW5ndGggKiAyXG4gICAgdXNlci5HZXRXaW5kb3dUZXh0VyBoV25kLCB0aXRsZUJ1ZmZlciwgdGl0bGVMZW5ndGhcbiAgICB0aXRsZUNsZWFuID0gcmVmLnJlaW50ZXJwcmV0VW50aWxaZXJvcyB0aXRsZUJ1ZmZlciwgd2NoYXIuc2l6ZVxuICAgIHdjaGFyLnRvU3RyaW5nIHRpdGxlQ2xlYW5cbiAgICBcbmlzTWluaW1pemVkID0gKGhXbmQpIC0+XG4gICAgXG4gICAgR1dMX1NUWUxFICAgPSAtMTZcbiAgICBXU19NSU5JTUlaRSA9IDB4MjAwMDAwMDBcbiAgICB1c2VyLkdldFdpbmRvd0xvbmdXKGhXbmQsIEdXTF9TVFlMRSkgJiBXU19NSU5JTUlaRVxuXG53aW5JbmZvID0gKGhXbmQpIC0+XG4gICAgICAgICAgICAgICAgICBcbiAgICBwcm9jQnVmZmVyID0gcmVmLmFsbG9jICd1aW50MzInXG4gICAgdGhyZWFkSUQgICA9IHVzZXIuR2V0V2luZG93VGhyZWFkUHJvY2Vzc0lkIGhXbmQsIHByb2NCdWZmZXJcbiAgICBwcm9jSUQgICAgID0gcmVmLmdldCBwcm9jQnVmZmVyXG4gICAgIFxuICAgIHByb2NIYW5kbGUgPSBrZXJuZWwuT3BlblByb2Nlc3MgMHgxMDAwLCBmYWxzZSwgcHJvY0lEXG4gICAgcGF0aEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyAxMDAwMFxuICAgIHBhdGhMZW5ndGggPSByZWYuYWxsb2MgJ3VpbnQzMicsIDUwMDBcbiAgICBrZXJuZWwuUXVlcnlGdWxsUHJvY2Vzc0ltYWdlTmFtZVcgcHJvY0hhbmRsZSwgMCwgcGF0aEJ1ZmZlciwgcGF0aExlbmd0aFxuICAgIHBhdGhTdHJpbmcgPSB3Y2hhci50b1N0cmluZyByZWYucmVpbnRlcnByZXRVbnRpbFplcm9zIHBhdGhCdWZmZXIsIHdjaGFyLnNpemVcbiAgICBwYXRoICAgICAgID0gcGF0aFN0cmluZyBhbmQgc2xhc2gucGF0aChwYXRoU3RyaW5nKSBvciAnJ1xuICAgICBcbiAgICBmb3JlZ3JvdW5kID0gaFduZCA9PSB1c2VyLkdldEZvcmVncm91bmRXaW5kb3coKVxuICAgIFxuICAgIGtlcm5lbC5DbG9zZUhhbmRsZSBwcm9jSGFuZGxlXG4gICAgICAgICAgICAgXG4gICAgaHduZDogICAgICAgaFduZFxuICAgIHpPcmRlcjogICAgIHpvcmRlciAgICAgIGhXbmRcbiAgICB0aXRsZTogICAgICB3aW5UaXRsZSAgICBoV25kXG4gICAgbWluaW1pemVkOiAgaXNNaW5pbWl6ZWQgaFduZFxuICAgIGZvcmVncm91bmQ6IGZvcmVncm91bmRcbiAgICB3aW5JRDogICAgICByZWYuYWRkcmVzcyBoV25kXG4gICAgcHJvY0lEOiAgICAgcHJvY0lEXG4gICAgdGhyZWFkSUQ6ICAgdGhyZWFkSURcbiAgICBwYXRoOiAgICAgICBwYXRoXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IHdpbkluZm9cbiJdfQ==
//# sourceURL=../coffee/wininfo.coffee